*deadcolumn.nvim.txt*       A neovim plugin that shows colorcolumn dynamically
*deadcolumn.nvim*
*deadcolumn.txt*
*deadcolumn*

		      deadcolumn.nvim    by Bekaboo


==============================================================================
CONTENTS                                                 *deadcolumn-contents*

1.Introduction                                  |deadcolumn.nvim-introduction|
2.Options                                            |deadcolumn.nvim-options|
3.FAQ                                                    |deadcolumn.nvim-faq|
4.Known Issues					     |deadcolumn.known-issues|


==============================================================================
INTRODUCTION                                         *deadcolumn-introduction*

Deadcolumn is a neovim plugin to assist users in maintaining a specific column
width in their code. This plugin operates by gradually displaying the
'colorcolumn' as the user approaches it. It is useful for people who wish to
keep their code aligned within a specific column range.

With this plugin, you can:

1. Gradually display the 'colorcolumn' as you approaches it
2. Display the column in warning color if current line exceeds 'colorcolumn'
3. Show the colored column only when you need it


==============================================================================
OPTIONS                                                   *deadcolumn-options*

The following is the default options, you can pass a table to
|deadcolumn.setup| to override the default options.

You are not required to call the setup function if you don’t want to change
the default options, the plugin should work out of the box.

>lua
    local opts = {
	scope = 'line',
	modes = { 'i', 'ic', 'ix', 'R', 'Rc', 'Rx', 'Rv', 'Rvc', 'Rvx' },
	blending = {
	    threshold = 0.75,
	    colorcode = '#000000',
	    hlgroup = {
		'Normal',
		'background',
	    },
	}
	warning = {
	    alpha = 0.4,
	    colorcode = '#FF0000',
	    hlgroup = {
		'Error',
		'background',
	    },
	},
    }
<

deadcolumn.setup({opts})                            *deadcolumn-optons-setup()*
    Setup function to call to configure the defaults.

    Usage: `require('deadcolumn.setup({opts}))`

    Valid keys for {opts}

                                                *deadcolumn-options-opts.scope*
    `scope` string (default "line")

	The scope for showing the colored column.

	Valid settings:

	1. "line"

	    Colored column will be shown based on the length of the current
	    line.

	2. "buffer"

	    Colored column will be shown based on the length of the longest
	    line in current buffer (up to 1000 lines around current line).

	3. "visible"

	    Colored column will be shown based on the length of the longest
	    line in the visible area.

	4. "cursor"

	    Colored column will be shown based on current cursor position.

                                                 *deadcolumn-options-ops.modes*
    `modes` table
	(default: { "i", "ic", "ix", "R", "Rc", "Rx", "Rv", "Rvc", "Rvx" })

	In which modes to show the colored column.

                                              *deadcolumn-options.ops.blending*
    `blending` table

	Blending options.

	Valid fields:

	1. `threshold` number	   *deadcolumn-options-opts.blending.threshold*
	    (default: 0.75)

	    The threshold for showing the colored column.

	    If `threshold` is a number between 0 and 1, it will be treated as
	    a relative threshold, the colored column will be shown when the
	    current line is longer than `threshold` times the 'colorcolumn'.

	    If `threshold` is a number greater than 1, it will be treated as a
	    fixed threshold, the colored column will be shown when the current
	    line is longer than `threshold` characters.
	
	2. `colorcode` string      *deadcolumn-options.opts.blending.colorcode*
	    (default: "#000000")

	    The color code to be used as the background color for blending.

	3. `hlgroup` table	     *deadcolumn-options.opts.blending.hlgroup*
	    (default: { "Normal", "background" })

	    The highlight group to be used as the background color for
	    blending. If the highlight group is not found, `colorcode` will be
	    used.

                                               *deadcolumn-options.ops.warning*
    `warning` table

	Warning color options.

	Valid fields:

	1. `alpha` number               *deadcolumn-options-opts.warning.alpha*
	    (default: 0.4)

	    Alpha value for the warning color, blended with the background
	    color.

	2. `colorcode` string        *deadcolumn-options-ops.warning.colorcode*
	     (default: "#FF0000")

	    Color code for the warning color.

	3. `hlgroup` table             *deadcolumn-options-ops.warning.hlgroup*
	     (default: { "Error", "background" })

	    The highlight group for the warning color.
	    If the highlight group is not found, `colorcode` will be used.


==============================================================================
FAQ                                                           *deadcolumn-faq*

------------------------------------------------------------------------------
Why can’t I see the colored column?
*deadcolumn-faq-colorcolumn-not-visible*

Please make sure you have set 'colorcolumn' to a value greater than 0.
If you set 'colorcolumn' to a relative value (e.g. -10), make sure
`textwidth` is set to a value greater than 0.


------------------------------------------------------------------------------
How to set different colorcolumn for different filetypes?
*deadcolumn-faq-different-colorcolumn-per-filetype*

Deadcolumn does not set 'colorcolumn' for you, it only reads and uses the
value of 'colorcolumn' of the current buffer to show the colored column
when needed.

It leaves to you to set 'colorcolumn' for different filetypes, under
different conditions, which is more flexible compared to setting
'colorcolumn' in the plugin setup function.

There are mainly two ways to set 'colorcolumn' for different filetypes:

1. Using |autocmd|

    Youcan use `:autocmd` to set 'colorcolumn' for different filetypes.
    For example, you can set 'colorcolumn' to 80 for markdown files:
>vim
    autocmd FileType markdown setlocal colorcolumn=80
<
2. Using |ftplugin|

    You can also use the ftplugin directory to set 'colorcolumn' for
    different filetypes.

    For example, you can create a file named `markdown.vim` in the
    `ftplugin` directory under your config directory, and set
    'colorcolumn' to 80 for markdown files:
>vim
    setlocal colorcolumn=80
<

==============================================================================
Known Issues					     *deadcolumn.known-issues*

------------------------------------------------------------------------------
Transparent Background
*deadcolumn.known-issues.transparant-background*

If you are using a transparent background, the colored column may not be
displayed properly, since the background color of the colored column
dynamically changed based on the blending of `'Normal'` background color and
the orignial `'CoolorColumn'` background color.

If Deadcolumn cannot find the `'Normal'` background color, it will use
'#000000' (pure black) as the default background color for blending.

There is no way to fix this, since terminal emulators do not support setting
a transparent background color for a specific character.

Workarounds:

1. You can set `opts.threshold` to 1 to disable blending when the length is
   smaller than 'colorcolumn' and show the colored column only when it is
   greater than 'colorcolumn'.

2. You can assign a different highlight group or a fixed colorcode to be used
   for blending with the original `ColorColumn` background color, for
   example:
>lua
   require('deadcolumn').setup({
       blending = {
           colorcode = '#1F2430',
           hlgroup = {
               'NonText',
               'background',
           },
       },
   })
<

vim:tw=78:ts=8:noet:ft=help:norl:
